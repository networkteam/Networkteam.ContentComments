// TODO 9.0 migration: Line 74: You very likely need to rewrite "VARIABLE.label" to "Neos.Node.label(VARIABLE)". We did not auto-apply this migration because we cannot be sure whether the variable is a Node.
// I think this is not relevant, so we can keep everything like it is. JP.
# Add prototype to render comment in frontend mit bootstrap 3 based styles
prototype(Networkteam.ContentComments:CommentRenderer) < prototype(Neos.Fusion:Value) {
    value = ${value}

    input = Neos.Fusion:Tag {
        @if.isLiveWorkspace = ${node.workspaceName == 'live'}
        tagName = 'input'
        attributes {
            type='checkbox'
            id = ${'c' + node.aggregateId}
            class="content-comments__state"
        }
    }
    label = Neos.Fusion:Tag {
        tagName = 'label'
        attributes {
            class = 'content-comments__trigger'
            for = ${'c' + node.aggregateId}
        }
        content = 'i'
    }
    comments = Neos.Fusion:Tag {
        @if.isLiveWorkspace = ${node.workspaceName == 'live'}
        tagName = 'div'
        attributes {
            class = 'content-comments__comments-container'
        }
        content = Neos.Fusion:Loop {
            items = ${Json.parse(q(node).property('comments'))}
            itemRenderer = Neos.Fusion:Tag {
                tagName = 'article'
                attributes {
                    class="content-comments__comment-item"
                    style = ${'border-left: 3px solid ' + item.userColor}
                }
                content = Neos.Fusion:Join {
                    commentHeader = Neos.Fusion:Tag {
                        tagName = 'header'
                        attributes {
                            class = "content-comments__comment-item-header"
                        }
                        content = Neos.Fusion:Join {
                            date = Neos.Fusion:Tag {
                                tagName = 'span'
                                attributes {
                                    class = "content-comments__comment-item-date"
                                }
                                content = ${Date.format(Date.parse(item.date, 'Y-m-d\TH:i:s.uP'), 'd.m.Y H:i:s')}
                            }

                            author = Neos.Fusion:Tag {
                                tagName = 'span'
                                attributes {
                                    class = "content-comments__comment-item-author"
                                }
                                content = ${' von ' + item.user}
                            }
                        }
                    }
                    comment = Neos.Fusion:Tag {
                        tagName = 'div'
                        attributes {
                            class = "content-comments__comment-item-comment"
                        }
                        content = ${String.pregReplace(item.comment, '/\n|\r/', '<br/>')}
                    }
                }
            }
        }
    }
    @process.wrapper {
        expression = ${'<div class="content-comments">' + this.input + this.comments + this.label + value + '</div>'}
        @position = 'start'
    }

    @if.showInFrontendisSet = ${Configuration.setting('Networkteam.ContentComments.ShowInFrontend') == true ? true : false}
    @if.commentsAvailable = ${q(node).property('comments')}
}
